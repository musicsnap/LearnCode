#MySQL数据源配置，详情请查看：http://www.coreseek.cn/products-install/mysql/
#请先将var/test/documents.sql导入数据库，并配置好以下的MySQL用户密码数据库
## 数据源mysql
source mysql
{
    ## 说明数据源的类型。数据源的类型可以是：mysql，pgsql，mssql，xmlpipe，odbc，python
    type                    = mysql
    ## 下面是sql数据库特有的端口，用户名，密码，数据库名等。
    sql_host                = localhost
    sql_user                = root
    sql_pass                = root
    sql_db                    = test
    sql_port                = 3306
    ## indexer的sql执行前需要执行的操作。
    sql_query_pre            = SET NAMES utf8
    ##indexer的sql执行语句
    sql_query                = SELECT id, group_id, UNIX_TIMESTAMP(date_added) AS date_added, title, content FROM documents
    ##sql_query第一列id需为整数
    ##title、content作为字符串/文本字段，被全文索引
    ## 有的时候有多个表，我们想要查询的字段在其他表中。这个时候就需要对sql_query进行join操作。
    ## 而这个join操作可能非常慢，导致建立索引的时候特别慢，那么这个时候，就可以考虑在sphinx端进行join操作了。这个我没去测过



    sql_attr_uint            = group_id           #从SQL读取到的值必须为整数
    sql_attr_timestamp        = date_added        #从SQL读取到的值必须为整数，作为时间属性
    ## 先要了解属性的概念：属性是存在索引中的，它不进行全文索引，但是可以用于过滤和排序。
    ## uint无符号整型属性  sql_attr_uint       = group_id
    ## bool属性   sql_attr_bool
    ## 长整型属性  sql_attr_bigint
    ## 时间戳属性，经常被用于做排序  sql_attr_timestamp  = date_added
    ## 字符串排序属性。 sql_attr_str2ordinal
    ##一般我们按照字符串排序的话，我们会将这个字符串存下来进入到索引中，然后在查询的时候比较索引中得字符大小进行排序。
    ## 但是这个时候索引就会很大，于是我们就想到了一个方法，我们在建立索引的时候，先将字符串值从数据库中取出，暂存，排序。
    ## 然后给排序后的数组分配一个序号，然后在建立索引的时候，就将这个序号存入到索引中去。这样在查询的时候也就能完成字符串排序的操作。
    ## 浮点数属性，经常在查询地理经纬度的时候会用到 sql_attr_float
    ##其他的属性没去了解过，以后去了解
    ## 多值属性（MVA）
    ## 试想一下，有一个文章系统，每篇文章都有多个标签，这个文章就叫做多值属性。
    ## 我要对某个标签进行查询过滤，那么在建立查询的时候就应该把这个标签的值放入到索引中。
    ## 这个字段，sql_attr_multi就是用来做这个事情的。
    # sql_attr_multi        = uint tag from query; SELECT docid, tagid FROM tags
    # sql_attr_multi        = uint tag from ranged-query; \
    #   SELECT docid, tagid FROM tags WHERE id>=$start AND id<=$end; \
    #   SELECT MIN(docid), MAX(docid) FROM tags
    ## 字符串属性。
    # sql_attr_string       = stitle
    ## 文档词汇数记录属性。比如下面就是在索引建立的时候增加一个词汇数的字段
    # sql_attr_str2wordcount    = stitle


	sql_pinyin				=	title


    sql_query_info_pre      = SET NAMES utf8
    #命令行查询时，设置正确的字符集
    sql_query_info            = SELECT * FROM documents WHERE id=$id
    #命令行查询时，从数据库读取原始数据信息
    ## 命令行获取信息查询。
    ## 什么意思呢？
    ## 我们进行索引一般只会返回主键id，而不会返回表中的所有字段。
    ## 但是在调试的时候，我们一般需要返回表中的字段，那这个时候，就需要使用sql_query_info。
    ## 同时这个字段只在控制台有效，在api中是无效的。
}

#index定义 索引mysql
index mysql
{
    ## 索引数据源
    source            = mysql             #对应的source名称
    ## 索引文件存放路径
    path            = var/data/mysql #请修改为实际使用的绝对路径，例如：/usr/local/coreseek/var/...
    docinfo            = extern
    ## 文档信息的存储模式，包括有none,extern,inline。默认是extern。
    ## docinfo指的就是数据的所有属性（field）构成的一个集合。
    ## 首先文档id是存储在一个文件中的（spa）
    ## 当使用inline的时候，文档的属性和文件的id都是存放在spa中的，所以进行查询过滤的时候，不需要进行额外操作。
    ## 当使用extern的时候，文档的属性是存放在另外一个文件（spd）中的，但是当启动searchd的时候，会把这个文件加载到内存中。
    ## extern就意味着每次做查询过滤的时候，除了查找文档id之外，还需要去内存中根据属性进行过滤。
    ## 但是即使这样，extern由于文件大小小，效率也不低。所以不是有特殊要求，一般都是使用extern
    mlock            = 0
    ## 缓冲内存锁定。
    ## searchd会讲spa和spi预读取到内存中。但是如果这部分内存数据长时间没有访问，则它会被交换到磁盘上。
    ## 设置了mlock就不会出现这个问题，这部分数据会一直存放在内存中的。
    morphology        = none
    ## 词形处理器
    ## 词形处理是什么意思呢？比如在英语中，dogs是dog的复数，所以dog是dogs的词干，这两个实际上是同一个词。
    ## 所以英语的词形处理器会讲dogs当做dog来进行处理。

    ## 最小索引词长度，小于这个长度的词不会被索引。
    min_word_len        = 1
    ## html标记清理，是否从输出全文数据中去除HTML标记。
    html_strip                = 0
    ## 最小前缀索引长度
	min_prefix_len		=	2
	pinyin_poly_fields = title
    #中文分词配置，详情请查看：http://www.coreseek.cn/products-install/coreseek_mmseg/
    #charset_dictpath = /usr/local/mmseg3/etc/ #BSD、Linux环境下设置，/符号结尾
    charset_dictpath = etc/
    #Windows环境下设置，/符号结尾，最好给出绝对路径，例如：C:/usr/local/coreseek/etc/...
    charset_type        = zh_cn.utf-8
    ## 字符集编码类型，可以为sbcs,utf-8。对于Coreseek，还可以有zh_cn.utf-8,zh_ch.gbk,zh_ch.big5
}

#全局index定义
indexer
{
     ## 建立索引的时候，索引内存限制
    mem_limit            = 128M
}

#searchd服务定义
searchd
{
    ## 监听端口
    listen                  =   9312
    ## 客户端读超时时间
    read_timeout        = 5
   ## 并行执行搜索的数目
    max_children        = 30
     ## 守护进程在内存中为每个索引所保持并返回给客户端的匹配数目的最大值
    max_matches            = 1000
    ## 无缝轮转。防止 searchd 轮换在需要预取大量数据的索引时停止响应
    ## 当进行索引轮换的时候，可能需要消耗大量的时间在轮换索引上。
    ## 但是启动了无缝轮转，就以消耗内存为代价减少轮转的时间
    seamless_rotate        = 0
    ## 索引预开启，是否强制重新打开所有索引文件
    preopen_indexes        = 0
    ## 索引轮换成功之后，是否删除以.old为扩展名的索引拷贝
    unlink_old            = 1
      ## 进程id文件
    pid_file = var/log/searchd_mysql.pid  #请修改为实际使用的绝对路径，例如：/usr/local/coreseek/var/...
     ## 监听日志
    log = var/log/searchd_mysql.log        #请修改为实际使用的绝对路径，例如：/usr/local/coreseek/var/...
    ## 查询日志
    query_log = var/log/query_mysql.log #请修改为实际使用的绝对路径，例如：/usr/local/coreseek/var/...
    binlog_path =                                #关闭binlog日志
}